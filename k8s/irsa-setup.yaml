# AWS IAM Role for Service Account (IRSA) Configuration
# This enables secure AWS credential management without hardcoded keys

---
# Service Account for IRSA
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-sa
  namespace: kubeflow
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/kubeflow-ml-pipeline-role

---
# IAM Trust Policy (apply via AWS CLI)
# aws iam create-role --role-name kubeflow-ml-pipeline-role --assume-role-policy-document file://trust-policy.json

# Save this as trust-policy.json
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Federated": "arn:aws:iam::ACCOUNT_ID:oidc-provider/oidc.eks.REGION.amazonaws.com/id/CLUSTER_ID"
#       },
#       "Action": "sts:AssumeRoleWithWebIdentity",
#       "Condition": {
#         "StringEquals": {
#           "oidc.eks.REGION.amazonaws.com/id/CLUSTER_ID:sub": "system:serviceaccount:kubeflow:ml-pipeline-sa",
#           "oidc.eks.REGION.amazonaws.com/id/CLUSTER_ID:aud": "sts.amazonaws.com"
#         }
#       }
#     }
#   ]
# }

---
# IAM Policy for S3 Access (apply via AWS CLI)
# aws iam put-role-policy --role-name kubeflow-ml-pipeline-role --policy-name S3MLPipelinePolicy --policy-document file://s3-policy.json

# Save this as s3-policy.json
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#         "s3:GetObject",
#         "s3:PutObject",
#         "s3:DeleteObject",
#         "s3:ListBucket"
#       ],
#       "Resource": [
#         "arn:aws:s3:::your-ml-bucket-name/*",
#         "arn:aws:s3:::your-ml-bucket-name"
#       ]
#     }
#   ]
# }